svgfile "dh.svg";

// Used for actuators that can be clicked in the SVG visualization
automaton def Button(alg string name):
    uncontrollable u_press;
    location off:
        initial;
        edge u_press goto on;   // toggle button state after each press

    location on:
         edge u_press goto off; // toggle button state after each press

    svgin  id name + "_M"    event u_press;
    svgout id name + "_M"    attr "fill" value if on:     "blue" else "grey" end;
end

    // actuators
    alg bool a_Dstartled        = button_Dstartled.on;
    alg bool a_Dresetled        = button_Dresetled.on;
    alg bool a_DledQ1           = button_DledQ1.on;
    alg bool a_DledQ2           = button_DledQ2.on;

    alg bool a_pusher1          = button_pusher1.on;
    alg bool a_pusher2          = button_pusher2.on;
    alg bool a_pusher3          = button_pusher3.on;

    alg bool a_Hstartled        = false;
    alg bool a_Hresetled        = false;
    alg bool a_HledQ1           = false;
    alg bool a_HledQ2           = false;

    alg bool a_x2distributing   = (arm_modes.off and button_x2distributing.on) or arm_modes.left or arm_modes.hold;
    alg bool a_x2testing        = (arm_modes.off and button_x2testing.on) or arm_modes.right or arm_modes.hold;
    alg bool a_zdown            = button_zdown.on;
    alg bool a_gripperclose     = button_gripperclose.on;
    alg bool a_transfer2pickpos = button_transfer2pickpos.on;
    alg bool a_transfer2droppos = button_transfer2droppos.on;
    alg bool a_vacuum           = button_vacuum.on;
    alg bool a_ejectpulse       = button_ejectpulse.on;
    alg bool a_handlingready    = button_handlingready.on;

    //manual buttons
    button_Dstartled:           Button("a_Dstartled");
    button_Dresetled:           Button("a_Dresetled");
    button_DledQ1:              Button("a_DledQ1");
    button_DledQ2:              Button("a_DledQ2");

    button_pusher1:             Button("a_pusher1");
    button_pusher2:             Button("a_pusher2");
    button_pusher3:             Button("a_pusher3");

    button_x2distributing:      Button("a_x2distributing");
    button_x2testing:           Button("a_x2testing");
    button_zdown:               Button("a_zdown");
    button_gripperclose:        Button("a_gripperclose");
    button_transfer2pickpos:    Button("a_transfer2pickpos");
    button_transfer2droppos:    Button("a_transfer2droppos");
    button_vacuum:              Button("a_vacuum");
    button_ejectpulse:          Button("a_ejectpulse");
    button_handlingready:       Button("a_handlingready");



uncontrollable u_mode_armleft, u_mode_armright, u_mode_armhold;
svgin id "mode_armleft_M"   event u_mode_armleft;
svgin id "mode_armright_M"  event u_mode_armright;
svgin id "mode_armhold_M"   event u_mode_armhold;

svgout id "mode_armleft_M"   attr "fill" value if arm_modes.left:       "blue" else "grey" end;
svgout id "mode_armright_M"  attr "fill" value if arm_modes.right:      "blue" else "grey" end;
svgout id "mode_armhold_M"   attr "fill" value if arm_modes.hold:       "blue" else "grey" end;

automaton arm_modes:
    location off:
        initial;
        edge u_mode_armleft    goto left;
        edge u_mode_armright   goto right;
        edge u_mode_armhold    goto hold;
        edge button_x2distributing.u_press, button_x2testing.u_press;

     location left:
        edge u_mode_armleft, button_x2distributing.u_press, button_x2testing.u_press   goto off;
        edge u_mode_armright   goto right;
        edge u_mode_armhold    goto hold;

     location right:
        edge u_mode_armleft    goto left;
        edge u_mode_armright, button_x2distributing.u_press, button_x2testing.u_press  goto off;
        edge u_mode_armhold    goto hold;

     location hold:
        edge u_mode_armleft    goto left;
        edge u_mode_armright   goto right;
        edge u_mode_armhold, button_x2distributing.u_press, button_x2testing.u_press goto off;
end

