<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://www.plcopen.org/xml/tc6_0201">
  <fileHeader companyName="Eindhoven University of Technology (TU/e)" creationDateTime="1970-01-01T01:00:00" productName="CIF to Structured Text" productVersion="0.0"/>
  <contentHeader name="Untitled1">
    <coordinateInfo>
      <fbd>
        <scaling x="1" y="1"/>
      </fbd>
      <ld>
        <scaling x="1" y="1"/>
      </ld>
      <sfc>
        <scaling x="1" y="1"/>
      </sfc>
    </coordinateInfo>
  </contentHeader>
  <types>
    <dataTypes>
      <dataType name="STATE">
        <baseType>
          <struct>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller_a_x2distributing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller_a_zdown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller_a_gripperclose">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller_gogrip">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller_a_x2testing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_example_controller">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_DledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_DledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Dout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_pusher1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_pusher2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_pusher3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hstartled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hresetled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_HledQ1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_HledQ2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_Hout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_x2distributing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_x2testing">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_zdown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_gripperclose">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_transfer2pickpos">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_transfer2droppos">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_vacuum">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_ejectpulse">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_out_a_handlingready">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_init_err_sen_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap_init_err_led_idx">
              <type>
                <DINT/>
              </type>
            </variable>
            <variable address="%Q*" name="cvar_M_HardwareMap_t">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable address="%Q*" name="dvar_M_HardwareMap">
              <type>
                <derived name="enum_E"/>
              </type>
            </variable>
          </struct>
        </baseType>
      </dataType>
      <dataType name="enum_E">
        <baseType>
          <enum>
            <values>
              <value name="elit_down"/>
              <value name="elit_goD1"/>
              <value name="elit_godropoff"/>
              <value name="elit_init0"/>
              <value name="elit_init1"/>
              <value name="elit_init2"/>
              <value name="elit_init3"/>
              <value name="elit_init4"/>
              <value name="elit_init5"/>
              <value name="elit_init6"/>
              <value name="elit_init7"/>
              <value name="elit_init8"/>
              <value name="elit_init9"/>
              <value name="elit_init_error"/>
              <value name="elit_init_ok"/>
              <value name="elit_init_sensor_check"/>
              <value name="elit_initialized"/>
              <value name="elit_move"/>
              <value name="elit_moving_up"/>
              <value name="elit_pickupprod"/>
              <value name="elit_wait_start"/>
            </values>
          </enum>
        </baseType>
      </dataType>
    </dataTypes>
    <pous>
      <pou name="alg_s_Dinitialized" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_s_Dinitialized := (state.dvar_M_HardwareMap) = (elit_initialized);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_s_Hinitialized" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_s_Hinitialized := (state.dvar_M_HardwareMap) = (elit_initialized);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_Dstartled" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_Dstartled := alg_M_example_controller_a_Dstartled(state);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_Dresetled" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_Dresetled := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_DledQ1" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_DledQ1 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_DledQ2" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_DledQ2 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_pusher1" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_pusher1 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_pusher2" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_pusher2 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_pusher3" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_pusher3 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_Hstartled" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_Hstartled := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_Hresetled" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_Hresetled := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_HledQ1" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_HledQ1 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_HledQ2" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_HledQ2 := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_x2distributing" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_x2distributing := state.dvar_M_example_controller_a_x2distributing;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_x2testing" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_x2testing := state.dvar_M_example_controller_a_x2testing;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_zdown" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_zdown := state.dvar_M_example_controller_a_zdown;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_gripperclose" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_gripperclose := state.dvar_M_example_controller_a_gripperclose;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_transfer2pickpos" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_transfer2pickpos := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_transfer2droppos" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_transfer2droppos := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_vacuum" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_vacuum := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_ejectpulse" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_ejectpulse := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_a_handlingready" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_a_handlingready := FALSE;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="alg_M_example_controller_a_Dstartled" pouType="function">
        <interface>
          <returnType>
            <BOOL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">alg_M_example_controller_a_Dstartled := (state.dvar_M_example_controller) = (elit_wait_start);</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="derivcvar_M_HardwareMap_t" pouType="function">
        <interface>
          <returnType>
            <LREAL/>
          </returnType>
          <inputVars>
            <variable name="state">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
          </inputVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">derivcvar_M_HardwareMap_t := 1.0;</xhtml>
          </ST>
        </body>
      </pou>
      <pou name="MAIN" pouType="program">
        <interface>
          <outputVars>
            <variable name="timerValue0">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="timerValue1">
              <type>
                <TIME/>
              </type>
            </variable>
          </outputVars>
          <localVars>
            <variable name="cnt">
              <type>
                <LINT/>
              </type>
            </variable>
            <variable name="first">
              <type>
                <BOOL/>
              </type>
              <initialValue>
                <simpleValue value="TRUE"/>
              </initialValue>
            </variable>
            <variable name="curTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="state0">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="curTime">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="loopsKilled">
              <type>
                <LINT/>
              </type>
            </variable>
          </localVars>
          <tempVars>
            <variable name="lastTimerValue">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaTime">
              <type>
                <TIME/>
              </type>
            </variable>
            <variable name="curDeltaSecs">
              <type>
                <LREAL/>
              </type>
            </variable>
            <variable name="state1">
              <type>
                <derived name="STATE"/>
              </type>
            </variable>
            <variable name="progress">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="loopCount">
              <type>
                <INT/>
              </type>
            </variable>
            <variable name="b1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable name="b2">
              <type>
                <BOOL/>
              </type>
            </variable>
          </tempVars>
        </interface>
        <body>
          <ST>
            <xhtml xmlns="http://www.w3.org/1999/xhtml">
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_example_controller_a_x2distributing := FALSE;
    state0.dvar_M_example_controller_a_zdown := FALSE;
    state0.dvar_M_example_controller_a_gripperclose := FALSE;
    state0.dvar_M_example_controller_gogrip := FALSE;
    state0.dvar_M_example_controller_a_x2testing := FALSE;
    state0.dvar_M_example_controller := elit_init2;
    state0.dvar_M_HardwareMap_out_a_Dstartled := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dresetled := FALSE;
    state0.dvar_M_HardwareMap_out_a_DledQ1 := TRUE;
    state0.dvar_M_HardwareMap_out_a_DledQ2 := TRUE;
    state0.dvar_M_HardwareMap_out_a_Dout4 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout5 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout6 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout7 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher1 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher2 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher3 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hstartled := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hresetled := FALSE;
    state0.dvar_M_HardwareMap_out_a_HledQ1 := TRUE;
    state0.dvar_M_HardwareMap_out_a_HledQ2 := TRUE;
    state0.dvar_M_HardwareMap_out_a_Hout4 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout5 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout6 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout7 := FALSE;
    state0.dvar_M_HardwareMap_out_a_x2distributing := TRUE;
    state0.dvar_M_HardwareMap_out_a_x2testing := TRUE;
    state0.dvar_M_HardwareMap_out_a_zdown := FALSE;
    state0.dvar_M_HardwareMap_out_a_gripperclose := FALSE;
    state0.dvar_M_HardwareMap_out_a_transfer2pickpos := FALSE;
    state0.dvar_M_HardwareMap_out_a_transfer2droppos := FALSE;
    state0.dvar_M_HardwareMap_out_a_vacuum := FALSE;
    state0.dvar_M_HardwareMap_out_a_ejectpulse := FALSE;
    state0.dvar_M_HardwareMap_out_a_handlingready := FALSE;
    state0.dvar_M_HardwareMap_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMap_init_err_led_idx := 0;
    state0.cvar_M_HardwareMap_t := 0.0;
    state0.dvar_M_HardwareMap := elit_init0;
ELSE
    // Update continuous variables for time delay.
    state1.cvar_M_HardwareMap_t := state0.cvar_M_HardwareMap_t + curDeltaSecs * derivcvar_M_HardwareMap_t(state0);

    state0.curTime := curTime;
    state0.cvar_M_HardwareMap_t := state1.cvar_M_HardwareMap_t;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "M.example_controller_drop".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_pickupprod);
        b1 := b1 AND (ivar_s_zpos_atdown);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller_a_gripperclose := NOT(state0.dvar_M_example_controller_gogrip);
            state1.dvar_M_example_controller_a_zdown := FALSE;
            state1.dvar_M_example_controller := elit_moving_up;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller := elit_move;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_move);
        b1 := b1 AND (ivar_s_xpos_at1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller_a_x2testing := TRUE;
            state1.dvar_M_example_controller_a_x2distributing := FALSE;
            state1.dvar_M_example_controller := elit_godropoff;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_move);
        b1 := b1 AND (NOT(ivar_s_xpos_at1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller_a_x2distributing := TRUE;
            state1.dvar_M_example_controller := elit_goD1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_godropoff);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller := elit_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_goD1);
        b1 := b1 AND (ivar_s_xpos_at1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller := elit_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_down);
        b1 := b1 AND (ivar_s_gripper);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller_a_zdown := TRUE;
            state1.dvar_M_example_controller_gogrip := TRUE;
            state1.dvar_M_example_controller := elit_pickupprod;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_down);
        b1 := b1 AND (NOT(ivar_s_gripper));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller_a_zdown := TRUE;
            state1.dvar_M_example_controller_gogrip := FALSE;
            state1.dvar_M_example_controller := elit_pickupprod;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_example_controller) = (elit_moving_up);
        b1 := b1 AND (ivar_s_zpos_atup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_example_controller := elit_move;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) &gt;= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := FALSE;
            state1.dvar_M_HardwareMap := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init2);
        IF b1 THEN
            b2 := ivar_s_xpos_at1;
            b2 := b2 OR (ivar_s_xpos_at2);
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := TRUE;
            state1.dvar_M_HardwareMap := elit_init3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init3) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := TRUE;
            state1.dvar_M_HardwareMap := elit_init4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init4);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := FALSE;
            state1.dvar_M_HardwareMap := elit_init5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init5) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := TRUE;
            state1.dvar_M_HardwareMap := elit_init6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init6);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := FALSE;
            state1.dvar_M_HardwareMap := elit_init7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init7) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := FALSE;
            state1.dvar_M_HardwareMap := elit_init8;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init8);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := TRUE;
            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap := elit_init9;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init9);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) &gt;= (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher1_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher1_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack1filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher2_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher2_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack2filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 15;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher3_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 16;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher3_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 17;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack3filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 18;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 19;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 22;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Hstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 23;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 24;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 25;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 26;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 27;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 28;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 29;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 33;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 34;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 35;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_xpos_atdrop));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 36;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_zpos_atup));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 37;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_zpos_atdown);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 38;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_gripper);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 39;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 40;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 41;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_transfer_athalfway));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 42;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_vacuum);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 43;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 44;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstartbutton));
        b1 := b1 AND (ivar_s_Dstopbutton);
        b1 := b1 AND (NOT(ivar_s_Dautoswitch));
        b1 := b1 AND (NOT(ivar_s_Dresetbutton));
        b1 := b1 AND (NOT(ivar_s_Din4));
        b1 := b1 AND (NOT(ivar_s_Din5));
        b1 := b1 AND (NOT(ivar_s_Din6));
        b1 := b1 AND (NOT(ivar_s_Din7));
        b1 := b1 AND (ivar_s_pusher1_in);
        b1 := b1 AND (NOT(ivar_s_pusher1_out));
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (NOT(ivar_s_product1));
        b1 := b1 AND (ivar_s_pusher2_in);
        b1 := b1 AND (NOT(ivar_s_pusher2_out));
        b1 := b1 AND (ivar_s_stack2filled);
        b1 := b1 AND (NOT(ivar_s_product2));
        b1 := b1 AND (ivar_s_pusher3_in);
        b1 := b1 AND (NOT(ivar_s_pusher3_out));
        b1 := b1 AND (ivar_s_stack3filled);
        b1 := b1 AND (NOT(ivar_s_product3));
        b1 := b1 AND (NOT(ivar_s_Hstartbutton));
        b1 := b1 AND (ivar_s_Hstopbutton);
        b1 := b1 AND (NOT(ivar_s_Hautoswitch));
        b1 := b1 AND (NOT(ivar_s_Hresetbutton));
        b1 := b1 AND (NOT(ivar_s_Hin4));
        b1 := b1 AND (NOT(ivar_s_Hin5));
        b1 := b1 AND (NOT(ivar_s_Hin6));
        b1 := b1 AND (NOT(ivar_s_Hin7));
        b1 := b1 AND (NOT(ivar_s_xpos_at1));
        b1 := b1 AND (NOT(ivar_s_xpos_at2));
        b1 := b1 AND (NOT(ivar_s_xpos_at3));
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND (NOT(ivar_s_zpos_atdown));
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (NOT(ivar_s_transfer_atpickup));
        b1 := b1 AND (NOT(ivar_s_transfer_atdrop));
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        b1 := b1 AND (NOT(ivar_s_product4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMap_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap_init_err_led_idx := 1;
            state1.dvar_M_HardwareMap_out_a_DledQ1 := TRUE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := TRUE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) &gt;= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMap_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap_init_err_led_idx := 0;
            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := TRUE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;
            state1.dvar_M_HardwareMap := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dstartled) &lt;&gt; (alg_a_Dstartled(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dstartled := alg_a_Dstartled(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_DledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_DledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout4) &lt;&gt; (ivar_a_Dout4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout4 := ivar_a_Dout4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout5) &lt;&gt; (ivar_a_Dout5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout5 := ivar_a_Dout5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout6) &lt;&gt; (ivar_a_Dout6));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout6 := ivar_a_Dout6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout7) &lt;&gt; (ivar_a_Dout7));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout7 := ivar_a_Dout7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher3) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher3 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hstartled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hresetled) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_HledQ1) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_HledQ2) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout4) &lt;&gt; (ivar_a_Hout4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout4 := ivar_a_Hout4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout5) &lt;&gt; (ivar_a_Hout5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout5 := ivar_a_Hout5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout6) &lt;&gt; (ivar_a_Hout6));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout6 := ivar_a_Hout6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout7) &lt;&gt; (ivar_a_Hout7));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout7 := ivar_a_Hout7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_x2distributing) &lt;&gt; (alg_a_x2distributing(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := alg_a_x2distributing(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_x2testing) &lt;&gt; (alg_a_x2testing(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := alg_a_x2testing(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_zdown) &lt;&gt; (alg_a_zdown(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_zdown := alg_a_zdown(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_gripperclose) &lt;&gt; (alg_a_gripperclose(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_gripperclose := alg_a_gripperclose(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_transfer2pickpos) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_transfer2droppos) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_vacuum) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_vacuum := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_ejectpulse) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_ejectpulse := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_handlingready) &lt;&gt; (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_handlingready := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount &gt;= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;</xhtml>
          </ST>
        </body>
      </pou>
    </pous>
  </types>
  <instances>
    <configurations>
      <configuration name="Untitled1">
        <resource name="Untitled1">
          <task interval="t#10ms" name="PlcTask" priority="20">
            <pouInstance name="MAIN" typeName="MAIN"/>
          </task>
          <globalVars constant="false" name="INPUTS">
            <variable address="%I*" name="ivar_s_Dstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Dautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher1_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher1_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack1filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher2_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher2_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack2filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher3_in">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_pusher3_out">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_stack3filled">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_handlingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hstartbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hstopbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hresetbutton">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hautoswitch">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at1">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at2">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_at3">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_xpos_atdrop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_zpos_atup">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_zpos_atdown">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_gripper">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_atpickup">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_atdrop">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_transfer_athalfway">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_vacuum">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_product4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_testingbusy">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Din7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_s_Hin7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Dout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Dout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Dout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Dout7">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Hout4">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Hout5">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Hout6">
              <type>
                <BOOL/>
              </type>
            </variable>
            <variable address="%I*" name="ivar_a_Hout7">
              <type>
                <BOOL/>
              </type>
            </variable>
          </globalVars>
          <globalVars constant="false" name="TIMERS">
            <variable name="timer0">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="timer1">
              <type>
                <derived name="TON"/>
              </type>
            </variable>
            <variable name="curTimer">
              <type>
                <INT/>
              </type>
              <initialValue>
                <simpleValue value="0"/>
              </initialValue>
            </variable>
          </globalVars>
        </resource>
      </configuration>
    </configurations>
  </instances>
</project>
