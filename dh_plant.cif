import "dh_plant_io.cif";

// Definition of the events that can be triggered by the user
uncontrollable u_start, u_reset, u_stop;
// Buttons that can be pressed by the operator
group operator:
    alg bool s_Dstartbutton = start_button.on;
    alg bool s_Dresetbutton = reset_button.on;
    alg bool s_Dstopbutton  = stop_button.on;
alg bool s_zpos_atdown          = crane.Extended;
alg bool s_zpos_atup            = crane.Retracted;
    start_button: UI_button(u_start);
    reset_button: UI_button(u_reset);
    stop_button:  UI_button(u_stop);
end

// Model of a User pressing a button
automaton def UI_button(uncontrollable u_press):
    event release;
    cont t der 1;

    location off:
        initial;
        edge u_press            do t := 0 goto on;  // press button

    location on:
        edge release when 0.5 <= t        goto off; // release after 0.5 seconds
        edge u_press;
end

// automaton gripperarm:
// cont x = 0;
// cont z = 0;
// event down, pick, drop, rise;
//
// disc bool gripping = false;
//
// // Sense the position of the crane
// alg bool s_xpos_at1 =       if gripperarm.x >= -136.9245 - 0.1 and gripperarm.x <= -136.9245 + 0.1: true
//                             else false end;
// alg bool s_xpos_at2 =       if gripperarm.x >= -90.2245 - 0.1 and gripperarm.x <= -90.2245 + 0.1: true
//                             else false end;
// alg bool s_xpos_at3 =       if gripperarm.x >= -44.5625 - 0.1 and gripperarm.x <= -44.2625 + 0.1: true
//                             else false end;
// alg bool s_xpos_atdrop =    if gripperarm.x >= - 0.1 and gripperarm.x <= 0.1: true
//                             else false end;
// alg bool s_zpos_atup =      if gripperarm.z >= - 0.2 and gripperarm.z <= 0.2: true
//                             else false end;
// alg bool s_zpos_atdown =    if gripperarm.z >= 66.0 - 0.3 and gripperarm.z <= 66.0 + 0.3: true
//                             else false end;
// alg bool s_gripper =        a_gripperclose;
//
// // Move the crane right to left and back
//     location move:
//     initial;
//     equation x' =   if a_x2distributing and x >= -136.9245:    -50
//                     elif not a_x2distributing and x <= 0:    50
//                     else 0 end;
//     equation z' =   0;
//     edge down when a_zdown goto zdown;
//
// // Move The crane up and down
//     location zdown:
//     equation x' =   0;
//     equation z' =   20;
//     edge pick when not a_zdown goto grips;
//
//     location zup:
//     equation x' =   0;
//     equation z' =   -20;
//     edge drop when s_zpos_atup goto move;
//
// // Grip the block
//     location grips:
//     equation x' =   0;
//     equation z' =   0;
//     edge rise do gripping := not gripping goto zup;
// end

//handling station

automaton Rails:
<<<<<<< HEAD
    event left, right, at_pusher1, at_drop, at_pusher2, at_pusher3, Pusher;
    const real v = -20;
=======
//    Sense the position of the crane
    alg bool s_xpos_at1 =       if Rails.x >= -136.745 - 0.15 and Rails.x <= -136.745 + 0.15: true
                                else false end;
    alg bool s_xpos_at2 =       if Rails.x >= -90.2245 - 0.15 and Rails.x <= -90.2245 + 0.15: true
                                else false end;
    alg bool s_xpos_at3 =       if Rails.x >= -44.5625 - 0.15 and Rails.x <= -44.2625 + 0.15: true
                                else false end;
    alg bool s_xpos_atdrop =    if Rails.x >= - 0.1 and Rails.x <= 0.1: true
                                else false end;

    alg bool s_gripper =        a_gripperclose;

    const real v = -20;
    cont x = 0;

    location Moving:
        initial;
<<<<<<< HEAD
        equation x'= 0;
        edge left when not a_x2testing and s_product1 goto Moving_left;

    location Moving_left:
        equation x' = if not a_x2testing: v else 0 end;
        edge at_pusher1 when not a_x2testing and -95<= x and x<= -94.9 and s_product1 goto Xpos_pusher_1;
        edge at_pusher2 when not a_x2testing and -66<= x and x= -64.9 and s_product2 goto Xpos_pusher_2;
        edge at_pusher3 when not a_x2testing and -30.6<= x and x<= -30.1 and s_product3 goto Xpos_pusher_3;


    location Xpos_pusher_1:
        equation x'= 0;
        edge right when not Pusher.product goto Moving_right;

    location Xpos_pusher_2:
        equation x'= 0;
        edge right when not Pusher.product goto Moving_right;

    location Xpos_pusher_3:
        equation x'= 0;
        edge right when not Pusher.product goto Moving_right;

    location Moving_right:
    initial;
    equation x' =   if a_x2distributing and x >= -136.9245:    -50
                    elif not a_x2distributing and x <= 0:    50
                    else 0 end;
    edge down when a_zdown goto zdown;
=======
        equation x' =   if a_x2testing and a_x2distributing: 0
                        elif a_x2testing: -v
                        elif a_x2distributing: v
                        else 0 end;

        edge when a_x2testing = not a_x2testing goto Moving;
        edge when a_x2distributing = not a_x2distributing goto Moving;
>>>>>>> master
end

automaton crane:
    alg bool s_zpos_atup =      if crane.y >= - 0.2 and crane.y <= 0.2: true
                                else false end;
    alg bool s_zpos_atdown =    if crane.y >= 66.0 - 0.3 and crane.y <= 66.0 + 0.3: true
                                else false end;

    event down, at_maxz, at_minz, up;

    alg real v_set = 20;
    cont y = 0;

    location Retracted:
        initial;
        equation y' = 0;
        edge down when a_zdown goto Down;

    location Down:
        equation y' = v_set;
        edge at_maxz when y >= 66.0 goto Extended;
        edge when not a_zdown goto Up;

    location Up:
        equation y' = -v_set;
        edge at_minz  when not a_zdown and y <= 0.0  goto Retracted;
        edge when a_zdown goto Down;

    location Extended:
        equation y' = 0;
        edge up when not a_zdown goto Up;
end

automaton gripper:
    alg bool s_gripper =        a_gripperclose;

    event release_no, released, grab;
    const real v_set = 1;
    cont x = 0;

    location Idle:
        initial;
        equation x' = 0;
        edge grab when a_gripperclose and s_xpos_at1 or s_xpos_at2 or s_xpos_at3  goto Grabbed;

    location Grabbed:
        equation x' = 0;
        edge release_no when s_xpos_atdrop and s_zpos_atdown goto Release;
    location Release:
        equation x' = if not a_gripperclose : -v_set else 0 end;
        edge released when not a_gripperclose and 0 <= x and x <= 0.025 goto Idle;
end

automaton pusher1:
    alg bool s_stack1filled = false;
    alg bool s_product1 = false;
    alg bool s_pusher1_in = pusher1.x >=-0.1;
    alg bool s_pusher1_out = pusher1.x<=-14.387+0.1;

    disc real pusherspeed = 22;

    cont x = 0;

    location Extended:
        equation x'=0;

        initial;
        edge when a_pusher1 goto left;

    location left:
        equation x'= -pusherspeed;

        edge when not a_pusher1 goto right;
        edge when pusher1.x<=-14.387+0.1 goto Retracted;

    location right:
        equation x' = pusherspeed;

        edge when a_pusher1 goto left;
        edge when pusher1.x >=-0.1 goto Extended;

    location Retracted:
        equation x' = 0;

        edge when not a_pusher1 goto right;

end

automaton pusher2:
    alg bool s_stack2filled = false;
    alg bool s_product2 = false;
    alg bool s_pusher2_in = pusher2.x >=-0.1;
    alg bool s_pusher2_out = pusher2.x<=-14.387+0.1;

    disc real pusherspeed = 22;

    cont x = 0;

    location Extended:
        equation x'=0;

        initial;
        edge when a_pusher2 goto left;

    location left:
        equation x'= -pusherspeed;

        edge when not a_pusher2 goto right;
        edge when pusher2.x<=-14.387+0.1 goto Retracted;

    location right:
        equation x' = pusherspeed;

        edge when a_pusher2 goto left;
        edge when pusher2.x >=-0.1 goto Extended;

    location Retracted:
        equation x' = 0;

        edge when not a_pusher2 goto right;

end

automaton pusher3:
    alg bool s_stack3filled = false;
    alg bool s_product3 = false;
    alg bool s_pusher3_in = pusher3.x >=-0.1;
    alg bool s_pusher3_out = pusher3.x<=-14.387+0.1;

    disc real pusherspeed = 22;

    cont x = 0;

    location Extended:
        equation x'=0;

        initial;
        edge when a_pusher3 goto left;

    location left:
        equation x'= -pusherspeed;

        edge when not a_pusher3 goto right;
        edge when pusher3.x<=-14.387+0.1 goto Retracted;

    location right:
        equation x' = pusherspeed;

        edge when a_pusher3 goto left;
        edge when pusher3.x >=-0.1 goto Extended;

    location Retracted:
        equation x' = 0;

        edge when not a_pusher3 goto right;

end




