<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="MAIN" Id="{adc42029-14a8-44d3-91bc-ed8b2f6ccbe7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR_OUTPUT
	timerValue0: TIME;
	timerValue1: TIME;
END_VAR
VAR
	cnt: LINT;
	first: BOOL := TRUE;
	curTimerValue: TIME;
	state0: STATE;
	curTime: LREAL;
	loopsKilled: LINT;
END_VAR
VAR_TEMP
	lastTimerValue: TIME;
	curDeltaTime: TIME;
	curDeltaSecs: LREAL;
	state1: STATE;
	progress: BOOL;
	loopCount: INT;
	b1: BOOL;
	b2: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Handle 'time' and cycle time.
cnt := cnt + 1;

timer0(IN := curTimer = 0, PT := T#1D);
timer1(IN := curTimer = 1, PT := T#1D);
timerValue0 := timer0.ET;
timerValue1 := timer1.ET;

lastTimerValue := curTimerValue;
IF curTimer = 0 THEN
    curTimerValue := timerValue0;
ELSE
    curTimerValue := timerValue1;
END_IF;
curDeltaTime := curTimerValue - lastTimerValue;
curDeltaSecs := TIME_TO_LREAL(curDeltaTime) / 1000;
curTime := curTime + curDeltaSecs;

IF cnt MOD 10 = 0 THEN
    curTimer := 1 - curTimer;
    curTimerValue := T#0S;
    timer0(IN := curTimer = 0, PT := T#1D);
    timer1(IN := curTimer = 1, PT := T#1D);
    timerValue0 := timer0.ET;
    timerValue1 := timer1.ET;
END_IF;

IF first THEN
    first := FALSE;

    // Initialize state variables for initial state.
    state0.dvar_M_Distributing_a_x2distributing := FALSE;
    state0.dvar_M_Distributing_a_zdown := FALSE;
    state0.dvar_M_Distributing_a_gripperclose := FALSE;
    state0.dvar_M_Distributing_a_x2testing := FALSE;
    state0.dvar_M_Distributing_i := 0;
    state0.cvar_M_Distributing_t := 0.0;
    state0.dvar_M_Distributing := elit_init2;
    state0.dvar_M_HardwareMap_out_a_Dstartled := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dresetled := FALSE;
    state0.dvar_M_HardwareMap_out_a_DledQ1 := TRUE;
    state0.dvar_M_HardwareMap_out_a_DledQ2 := TRUE;
    state0.dvar_M_HardwareMap_out_a_Dout4 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout5 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout6 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Dout7 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher1 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher2 := FALSE;
    state0.dvar_M_HardwareMap_out_a_pusher3 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hstartled := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hresetled := FALSE;
    state0.dvar_M_HardwareMap_out_a_HledQ1 := TRUE;
    state0.dvar_M_HardwareMap_out_a_HledQ2 := TRUE;
    state0.dvar_M_HardwareMap_out_a_Hout4 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout5 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout6 := FALSE;
    state0.dvar_M_HardwareMap_out_a_Hout7 := FALSE;
    state0.dvar_M_HardwareMap_out_a_x2distributing := TRUE;
    state0.dvar_M_HardwareMap_out_a_x2testing := TRUE;
    state0.dvar_M_HardwareMap_out_a_zdown := FALSE;
    state0.dvar_M_HardwareMap_out_a_gripperclose := FALSE;
    state0.dvar_M_HardwareMap_out_a_transfer2pickpos := FALSE;
    state0.dvar_M_HardwareMap_out_a_transfer2droppos := FALSE;
    state0.dvar_M_HardwareMap_out_a_vacuum := FALSE;
    state0.dvar_M_HardwareMap_out_a_ejectpulse := FALSE;
    state0.dvar_M_HardwareMap_out_a_handlingready := FALSE;
    state0.dvar_M_HardwareMap_init_err_sen_idx := -1;
    state0.dvar_M_HardwareMap_init_err_led_idx := 0;
    state0.cvar_M_HardwareMap_t := 0.0;
    state0.dvar_M_HardwareMap := elit_init0;
    state0.dvar_M_inventory1_a_pusher1 := FALSE;
    state0.dvar_M_inventory1 := elit_init2;
    state0.dvar_M_inventory2_a_pusher2 := FALSE;
    state0.dvar_M_inventory2 := elit_init2;
    state0.dvar_M_inventory3_a_pusher3 := FALSE;
    state0.dvar_M_inventory3 := elit_init2;
    state0.dvar_M_vacuum_a_transfer2pickpos := FALSE;
    state0.dvar_M_vacuum_a_transfer2droppos := FALSE;
    state0.dvar_M_vacuum_a_vacuum := FALSE;
    state0.dvar_M_vacuum_a_ejectpulse := FALSE;
    state0.dvar_M_vacuum := elit_init2;
ELSE
    // Update continuous variables for time delay.
    state1.cvar_M_Distributing_t := state0.cvar_M_Distributing_t + curDeltaSecs * derivcvar_M_Distributing_t(state0);
    state1.cvar_M_HardwareMap_t := state0.cvar_M_HardwareMap_t + curDeltaSecs * derivcvar_M_HardwareMap_t(state0);

    state0.curTime := curTime;
    state0.cvar_M_Distributing_t := state1.cvar_M_Distributing_t;
    state0.cvar_M_HardwareMap_t := state1.cvar_M_HardwareMap_t;
END_IF;

// Event loop.
WHILE TRUE DO
    progress := FALSE;

    // Event "M.inventory1_a".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher1_in);
        b1 := b1 AND (NOT(ivar_s_product1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1_a_pusher1 := TRUE;
            state1.dvar_M_inventory1 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.inventory1_b".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher1_out);
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (state0.dvar_M_inventory1_a_pusher1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.inventory1_c".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_starting);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1_a_pusher1 := FALSE;
            state1.dvar_M_inventory1 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "M.inventory1_d".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_going);
        b1 := b1 AND (ivar_s_pusher1_out);
        b1 := b1 AND (ivar_s_stack1filled);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1_a_pusher1 := FALSE;
            state1.dvar_M_inventory1 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing := elit_droppoint;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_button);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_button);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing := elit_wait_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_button);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing := elit_pauze_left;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_button);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing := elit_wait_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_button);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing := elit_pauze_left;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_pauze_left);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_pauze_left);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_wait_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_pauze_left);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_wait_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_wait_vacuum);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_wait_vacuum);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_finished;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_wait_vacuum);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_down);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_down);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := TRUE;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing := elit_reset_place;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_place);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset_place);
        b1 := b1 AND (ivar_s_zpos_atdown);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_Distributing_t := 0.0;
            state1.dvar_M_Distributing_a_gripperclose := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing := elit_finished;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_stop);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_droppoint;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_stop);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_droppoint);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_droppoint);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_droppoint);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND (ivar_s_zpos_atup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_droppoint);
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND (ivar_s_zpos_atup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing := elit_movetopickup;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_movetopickup);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_movetopickup);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_movetopickup);
        b1 := b1 AND (projArray1(alg_M_Distributing_atpos(state0), projArray0(makeArray0(0, 1, 0, 2), state0.dvar_M_Distributing_i)));
        b1 := b1 AND ((state0.dvar_M_Distributing_i) < (3));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_i := (state0.dvar_M_Distributing_i) + (1);
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_movetopickup);
        b1 := b1 AND (projArray1(alg_M_Distributing_atpos(state0), projArray0(makeArray0(0, 1, 0, 2), state0.dvar_M_Distributing_i)));
        b1 := b1 AND ((state0.dvar_M_Distributing_i) >= (3));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_i := 0;
            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_down;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_down);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_down);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_Distributing) = (elit_down) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_zdown := TRUE;
            state1.dvar_M_Distributing := elit_gopickup;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_gopickup);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_gopickup);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_gopickup);
        b1 := b1 AND (ivar_s_zpos_atdown);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (NOT(ivar_s_xpos_atdrop));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_gripperclose := TRUE;
            state1.dvar_M_Distributing := elit_goup;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_gopickup);
        b1 := b1 AND (ivar_s_zpos_atdown);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_gripperclose := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_droppoint;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_goup);
        b1 := b1 AND ((state0.cvar_M_Distributing_t) >= (0.1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_Distributing_t := 0.0;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_goback;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_goback);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_goback);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_goback);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND (ivar_s_gripper);
        b1 := b1 AND ((state0.cvar_M_Distributing_t) > (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.cvar_M_Distributing_t := 0.0;
            state1.dvar_M_Distributing := elit_droppoint;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_finished);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_finished);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := TRUE;
            state1.dvar_M_Distributing_a_x2testing := TRUE;
            state1.dvar_M_Distributing := elit_reset;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing_a_zdown := FALSE;
            state1.dvar_M_Distributing := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_Distributing) = (elit_reset);
        b1 := b1 AND ((state0.cvar_M_Distributing_t) > (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_Distributing_t := 0.0;
            state1.dvar_M_Distributing_a_x2distributing := FALSE;
            state1.dvar_M_Distributing_a_x2testing := FALSE;
            state1.dvar_M_Distributing := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init0);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) >= (2.0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init1;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init1) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := FALSE;
            state1.dvar_M_HardwareMap := elit_init2;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init2);
        IF b1 THEN
            b2 := ivar_s_xpos_at1;
            b2 := b2 OR (ivar_s_xpos_at2);
            b1 := b1 AND (b2);
        END_IF;
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := TRUE;
            state1.dvar_M_HardwareMap := elit_init3;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init3) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := TRUE;
            state1.dvar_M_HardwareMap := elit_init4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init4);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := FALSE;
            state1.dvar_M_HardwareMap := elit_init5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init5) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := TRUE;
            state1.dvar_M_HardwareMap := elit_init6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init6);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := FALSE;
            state1.dvar_M_HardwareMap := elit_init7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init7) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := FALSE;
            state1.dvar_M_HardwareMap := elit_init8;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init8);
        b1 := b1 AND (ivar_s_xpos_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := TRUE;
            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap := elit_init9;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init9);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) >= (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init_sensor_check;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 0;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 1;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 2;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 3;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 4;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 5;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 6;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Din7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 7;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher1_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 8;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher1_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 9;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack1filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 10;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 11;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher2_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 12;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher2_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 13;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack2filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 14;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 15;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_pusher3_in));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 16;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_pusher3_out);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 17;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_stack3filled));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 18;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 19;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 22;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Hstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 23;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 24;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 25;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 26;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin5);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 27;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin6);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 28;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_Hin7);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 29;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at1);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 33;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 34;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_xpos_at3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 35;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_xpos_atdrop));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 36;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_zpos_atup));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 37;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_zpos_atdown);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 38;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_gripper);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 39;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 40;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 41;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_transfer_athalfway));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 42;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_vacuum);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 43;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (ivar_s_product4);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_init_err_sen_idx := 44;
            state1.dvar_M_HardwareMap := elit_init_error;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_sensor_check);
        b1 := b1 AND (NOT(ivar_s_Dstartbutton));
        b1 := b1 AND (ivar_s_Dstopbutton);
        b1 := b1 AND (NOT(ivar_s_Dautoswitch));
        b1 := b1 AND (NOT(ivar_s_Dresetbutton));
        b1 := b1 AND (NOT(ivar_s_Din4));
        b1 := b1 AND (NOT(ivar_s_Din5));
        b1 := b1 AND (NOT(ivar_s_Din6));
        b1 := b1 AND (NOT(ivar_s_Din7));
        b1 := b1 AND (ivar_s_pusher1_in);
        b1 := b1 AND (NOT(ivar_s_pusher1_out));
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (NOT(ivar_s_product1));
        b1 := b1 AND (ivar_s_pusher2_in);
        b1 := b1 AND (NOT(ivar_s_pusher2_out));
        b1 := b1 AND (ivar_s_stack2filled);
        b1 := b1 AND (NOT(ivar_s_product2));
        b1 := b1 AND (ivar_s_pusher3_in);
        b1 := b1 AND (NOT(ivar_s_pusher3_out));
        b1 := b1 AND (ivar_s_stack3filled);
        b1 := b1 AND (NOT(ivar_s_product3));
        b1 := b1 AND (NOT(ivar_s_Hstartbutton));
        b1 := b1 AND (ivar_s_Hstopbutton);
        b1 := b1 AND (NOT(ivar_s_Hautoswitch));
        b1 := b1 AND (NOT(ivar_s_Hresetbutton));
        b1 := b1 AND (NOT(ivar_s_Hin4));
        b1 := b1 AND (NOT(ivar_s_Hin5));
        b1 := b1 AND (NOT(ivar_s_Hin6));
        b1 := b1 AND (NOT(ivar_s_Hin7));
        b1 := b1 AND (NOT(ivar_s_xpos_at1));
        b1 := b1 AND (NOT(ivar_s_xpos_at2));
        b1 := b1 AND (NOT(ivar_s_xpos_at3));
        b1 := b1 AND (ivar_s_xpos_atdrop);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND (NOT(ivar_s_zpos_atdown));
        b1 := b1 AND (NOT(ivar_s_gripper));
        b1 := b1 AND (NOT(ivar_s_transfer_atpickup));
        b1 := b1 AND (NOT(ivar_s_transfer_atdrop));
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        b1 := b1 AND (NOT(ivar_s_product4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap := elit_init_ok;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) >= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMap_init_err_led_idx) = (0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap_init_err_led_idx := 1;
            state1.dvar_M_HardwareMap_out_a_DledQ1 := TRUE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := TRUE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_init_error);
        b1 := b1 AND ((state0.cvar_M_HardwareMap_t) >= (0.5));
        b1 := b1 AND ((state0.dvar_M_HardwareMap_init_err_led_idx) = (1));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.cvar_M_HardwareMap_t := 0.0;
            state1.dvar_M_HardwareMap_init_err_led_idx := 0;
            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := TRUE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := TRUE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        IF (state0.dvar_M_HardwareMap) = (elit_init_ok) THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;
            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;
            state1.dvar_M_HardwareMap := elit_initialized;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dstartled) <> (alg_a_Dstartled(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dstartled := alg_a_Dstartled(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dresetled) <> (alg_a_Dresetled(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dresetled := alg_a_Dresetled(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_DledQ1) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_DledQ2) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_DledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout4) <> (ivar_a_Dout4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout4 := ivar_a_Dout4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout5) <> (ivar_a_Dout5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout5 := ivar_a_Dout5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout6) <> (ivar_a_Dout6));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout6 := ivar_a_Dout6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Dout7) <> (ivar_a_Dout7));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Dout7 := ivar_a_Dout7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher1) <> (alg_a_pusher1(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher1 := alg_a_pusher1(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher2) <> (alg_a_pusher2(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher2 := alg_a_pusher2(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_pusher3) <> (alg_a_pusher3(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_pusher3 := alg_a_pusher3(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hstartled) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hstartled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hresetled) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hresetled := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_HledQ1) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_HledQ1 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_HledQ2) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_HledQ2 := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout4) <> (ivar_a_Hout4));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout4 := ivar_a_Hout4;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout5) <> (ivar_a_Hout5));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout5 := ivar_a_Hout5;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout6) <> (ivar_a_Hout6));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout6 := ivar_a_Hout6;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_Hout7) <> (ivar_a_Hout7));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_Hout7 := ivar_a_Hout7;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_x2distributing) <> (alg_a_x2distributing(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2distributing := alg_a_x2distributing(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_x2testing) <> (alg_a_x2testing(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_x2testing := alg_a_x2testing(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_zdown) <> (alg_a_zdown(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_zdown := alg_a_zdown(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_gripperclose) <> (alg_a_gripperclose(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_gripperclose := alg_a_gripperclose(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_transfer2pickpos) <> (alg_a_transfer2pickpos(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2pickpos := alg_a_transfer2pickpos(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_transfer2droppos) <> (alg_a_transfer2droppos(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_transfer2droppos := alg_a_transfer2droppos(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_vacuum) <> (alg_a_vacuum(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_vacuum := alg_a_vacuum(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_ejectpulse) <> (alg_a_ejectpulse(state0)));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_ejectpulse := alg_a_ejectpulse(state0);

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_HardwareMap) = (elit_initialized);
        b1 := b1 AND ((state0.dvar_M_HardwareMap_out_a_handlingready) <> (FALSE));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_HardwareMap_out_a_handlingready := FALSE;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1 := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_stop);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory1) = (elit_going);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory1 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2 := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_stop);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher2_in);
        b1 := b1 AND (NOT(ivar_s_product2));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2_a_pusher2 := TRUE;
            state1.dvar_M_inventory2 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher2_out);
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (state0.dvar_M_inventory2_a_pusher2);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_starting);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2_a_pusher2 := FALSE;
            state1.dvar_M_inventory2 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_going);
        b1 := b1 AND (ivar_s_pusher2_out);
        b1 := b1 AND (ivar_s_stack2filled);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2_a_pusher2 := FALSE;
            state1.dvar_M_inventory2 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory2) = (elit_going);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory2 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3 := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_stop);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher3_in);
        b1 := b1 AND (NOT(ivar_s_product3));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3_a_pusher3 := TRUE;
            state1.dvar_M_inventory3 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_starting);
        b1 := b1 AND (ivar_s_pusher3_out);
        b1 := b1 AND (ivar_s_stack1filled);
        b1 := b1 AND (state0.dvar_M_inventory3_a_pusher3);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3 := elit_going;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_starting);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3_a_pusher3 := FALSE;
            state1.dvar_M_inventory3 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_going);
        b1 := b1 AND (ivar_s_pusher3_out);
        b1 := b1 AND (ivar_s_stack3filled);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3_a_pusher3 := FALSE;
            state1.dvar_M_inventory3 := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_inventory3) = (elit_going);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_inventory3 := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_init2);
        b1 := b1 AND (alg_s_Dinitialized(state0));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_wait_start);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_clear_vacuum);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        b1 := b1 AND (ivar_s_vacuum);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_vacuum := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := TRUE;
            state1.dvar_M_vacuum_a_transfer2pickpos := TRUE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_clear_vacuum);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_vacuum := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum_a_transfer2pickpos := TRUE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum := elit_reset_button;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_reset_button);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_wait_start;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_stop);
        b1 := b1 AND (ivar_s_Dstartbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_stop);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum := elit_clear_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_key);
        b1 := b1 AND (NOT(ivar_s_Dautoswitch));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_starting);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum := elit_clear_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_starting);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_starting);
        b1 := b1 AND (ivar_s_product4);
        b1 := b1 AND (ivar_s_zpos_atup);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := TRUE;
            state1.dvar_M_vacuum := elit_pickupvac;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_starting);
        b1 := b1 AND (ivar_s_vacuum);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum := elit_pickupvac;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_starting);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (ivar_s_Dautoswitch);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_key;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_pickupvac);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum := elit_clear_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_pickupvac);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_pickupvac);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_vacuum := TRUE;
            state1.dvar_M_vacuum := elit_testingdrop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_pickupvac);
        b1 := b1 AND (ivar_s_transfer_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_vacuum := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := TRUE;
            state1.dvar_M_vacuum := elit_testingdrop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_pickupvac);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (ivar_s_Dautoswitch);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_key;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_testingdrop);
        b1 := b1 AND (ivar_s_Dresetbutton);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum := elit_clear_vacuum;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_testingdrop);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_testingdrop);
        b1 := b1 AND (ivar_s_vacuum);
        b1 := b1 AND (ivar_s_transfer_atpickup);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2droppos := TRUE;
            state1.dvar_M_vacuum := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_testingdrop);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        b1 := b1 AND (ivar_s_transfer_atdrop);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := TRUE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum := elit_rest;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_testingdrop);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (ivar_s_Dautoswitch);
        b1 := b1 AND (NOT(ivar_s_vacuum));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_key;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_rest);
        b1 := b1 AND (NOT(ivar_s_Dstopbutton));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_stop;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_rest);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (ivar_s_Dautoswitch);
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_vacuum := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_key;

            state0 := state1;
        END_IF;
    END_IF;

    // Event "tau".
    IF NOT progress THEN
        b1 := (state0.dvar_M_vacuum) = (elit_rest);
        b1 := b1 AND (ivar_s_transfer_athalfway);
        b1 := b1 AND (NOT(ivar_s_Dautoswitch));
        IF b1 THEN
            progress := TRUE;
            state1 := state0;

            state1.dvar_M_vacuum_a_transfer2pickpos := FALSE;
            state1.dvar_M_vacuum_a_transfer2droppos := FALSE;
            state1.dvar_M_vacuum_a_vacuum := FALSE;
            state1.dvar_M_vacuum_a_ejectpulse := FALSE;
            state1.dvar_M_vacuum := elit_starting;

            state0 := state1;
        END_IF;
    END_IF;

    // Done with events?
    IF NOT progress THEN
        EXIT;
    END_IF;

    // Protect against events that are always enabled.
    loopCount := loopCount + 1;
    IF loopCount >= 100 THEN
        loopsKilled := loopsKilled + 1;
        EXIT;
    END_IF;
END_WHILE;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="3" Count="2853" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>